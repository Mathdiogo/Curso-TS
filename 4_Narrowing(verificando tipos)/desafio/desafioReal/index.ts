// index.ts

// 1. Defini√ß√£o do tipo Review:
// √â crucial que essa defini√ß√£o esteja acess√≠vel ao seu c√≥digo TypeScript.
// Se voc√™ est√° usando um ambiente com modules (como um setup React completo),
// voc√™ exportaria isso: `export type Review = { ... }`
// Mas para um setup simples com <script src="index.js"></script>,
// mant√™-lo no mesmo arquivo ou em um arquivo que √© importado primeiro funciona.
type ReviewData = { // Renomeado para evitar confus√£o com a interface Review na imagem
    userName: string; // Adicionado para ser expl√≠cito que √© o nome do usu√°rio
    value: boolean | number;
    timestamp: string;
    message: string;
}

// 2. Vari√°vel global para armazenar todas as avalia√ß√µes.
// O tipo √© um objeto onde as chaves s√£o strings (nomes de usu√°rio) e os valores s√£o ReviewData.
// Poder√≠amos usar 'Map<string, ReviewData>' tamb√©m, mas o objeto literal √© comum.
const allUserReviews: { [key: string]: ReviewData } = {};

/**
 * Processa uma nova avalia√ß√£o e a armazena.
 * @param reviewValue O valor da avalia√ß√£o (true/false para 'n√£o avaliou' ou n√∫mero de 1 a 5).
 * @param userName O nome do usu√°rio que est√° avaliando.
 * @returns O objeto ReviewData rec√©m-criado.
 */
function processReview(reviewValue: boolean | number, userName: string): ReviewData {
    let message: string;

    // Narrowing: Verificando o tipo da `reviewValue`
    if (typeof reviewValue === 'number') {
        // Garantir que a nota est√° entre 1 e 5, se for um n√∫mero
        if (reviewValue >= 1 && reviewValue <= 5) {
            switch (reviewValue) {
                case 1:
                    message = "Achamos que voc√™ pode nos ajudar a melhorar. üòî 1 estrela";
                    break;
                case 2:
                    message = "Obrigado por sua avalia√ß√£o. Queremos ser melhores! 2 estrelas";
                    break;
                case 3:
                    message = "Agradecemos sua nota. Continuaremos trabalhando para melhorar. 3 estrelas";
                    break;
                case 4:
                    message = "Ficamos felizes que tenha gostado! üòä 4 estrelas";
                    break;
                case 5:
                    message = "Incr√≠vel! Muito obrigado pela sua avalia√ß√£o de 5 estrelas! ‚≠ê";
                    break;
                default:
                    // Este default n√£o deve ser alcan√ßado devido √† verifica√ß√£o if,
                    // mas √© bom ter para completude de tipos.
                    message = "A nota deve ser entre 1 e 5. Por favor, tente novamente.";
                    break;
            }
        } else {
            message = "Nota inv√°lida: O valor num√©rico deve ser entre 1 e 5.";
        }
    } else if (typeof reviewValue === 'boolean') {
        if (reviewValue === false) {
            message = "Que pena que voc√™ n√£o quis deixar uma avalia√ß√£o. Tudo bem! üòä";
        } else {
            // Caso reviewValue seja true, o que n√£o esperamos para 'n√£o avaliou'.
            message = "Avalia√ß√£o booleana inesperada (true).";
        }
    } else {
        // Caso o tipo seja algo diferente de number ou boolean (TypeScript ajuda a evitar isso).
        message = "Tipo de avalia√ß√£o desconhecido.";
    }

    const newReview: ReviewData = {
        userName: userName, // Atribuir o nome do usu√°rio ao campo userName
        value: reviewValue,
        timestamp: new Date().toISOString(), // Formato mais leg√≠vel
        message: message,
    };

    // Armazenar a avalia√ß√£o usando o nome do usu√°rio como chave
    allUserReviews[userName] = newReview;

    return newReview;
}

/**
 * Retorna todas as avalia√ß√µes armazenadas.
 * @returns Um objeto contendo todas as avalia√ß√µes, indexadas pelo nome de usu√°rio.
 */
function getStoredReviews(): { [key: string]: ReviewData } {
    return allUserReviews;
}